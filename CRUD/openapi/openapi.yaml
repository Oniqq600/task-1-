# openapi: 3.0.3
# info:
#    title: API
#    version: 1.0.0
# paths:
#   /users:
#     get:
#       summary: GetUsers
#       description: Получить список всех пользователей.
#       responses:
#         '200':
#           description: Успешный ответ с массивом пользователей.
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: '#/components/schemas/User'
#     post:
#       summary: PostUser
#       description: Создать нового пользователя.
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/UserCreate'
#       responses:
#         '201':
#           description: Пользователь успешно создан.
#         '400':
#           description: Некорректные данные в запросе.

#   /users/{id}:
#     patch:
#       summary: PatchUserByID
#       description: Отредактировать поля пользователя по его ID.
#       parameters:
#         - name: id
#           in: path
#           required: true
#           description: Уникальный идентификатор пользователя.
#           schema:
#             type: string
#       requestBody:
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/UserUpdate'
#       responses:
#         '200':
#           description: Пользователь успешно обновлен.
#         '404':
#           description: Пользователь не найден.
#     delete:
#       summary: DeleteUserByID
#       description: Удалить пользователя по его ID.
#       parameters:
#         - name: id
#           in: path
#           required: true
#           description: Уникальный идентификатор пользователя.
#           schema:
#             type: string
#       responses:
#         '204':
#           description: Пользователь успешно удален.
#         '404':
#           description: Пользователь не найден.

# components:
#   schemas:
#     User:
#       type: object
#       properties:
#         id:
#           type: string
#           description: Уникальный идентификатор пользователя.
#         name:
#           type: string
#           description: Имя пользователя.
#         email:
#           type: string
#           description: Электронная почта пользователя.
#     UserCreate:
#       type: object
#       required:
#         - name
#         - email
#       properties:
#         name:
#           type: string
#           description: Имя нового пользователя.
#         email:
#           type: string
#           description: Электронная почта нового пользователя.
#     UserUpdate:
#       type: object
#       properties:
#         name:
#           type: string
#           description: Новое имя пользователя.
#         email:
#           type: string
#           description: Новая электронная почта пользователя.

openapi: 3.0.0
info:
  title: API
  version: 1.0.0
paths:
  /tasks:
    get:
      summary: Get all tasks
      tags:
        - tasks
      responses:
        '200':
          description: A list of tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
    post:
      summary: Create a new task
      tags:
        - tasks
      requestBody:
        description: The task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: The created task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /tasks/{id}:
    patch:
      summary: Update a task
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the task to update
          schema:
            type: integer
      requestBody:
        description: The fields of the task to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                task:
                  type: string
                is_done:
                  type: boolean
                user_id:
                  type: integer
      responses:
        '200':
          description: The updated task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
    delete:
      summary: Delete a task
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the task to delete
          schema:
            type: integer
      responses:
        '204':
          description: Task successfully deleted
        '404':
          description: Task not found

  /tasks/user/{user_id}:
    get:
      summary: Get all tasks for a specific user
      tags:
        - tasks
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user to fetch tasks for
          schema:
            type: integer
      responses:
        '200':
          description: A list of tasks for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '404':
          description: User not found

  /tasks/{user_id}:
    post:
      summary: Create a new task with a user ID
      tags:
        - tasks
      parameters:
        - name: user_id
          in: path
          required: true
          description: The ID of the user to associate with the task
          schema:
            type: integer
      requestBody:
        description: The task to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: The created task with user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: uint
        task:
          type: string
        is_done:
          type: boolean
        user_id:
          type: integer
          description: ID of the user who owns the task
